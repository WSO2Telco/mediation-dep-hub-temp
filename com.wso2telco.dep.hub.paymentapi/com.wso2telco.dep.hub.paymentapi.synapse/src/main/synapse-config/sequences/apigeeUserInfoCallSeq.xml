<?xml version="1.0" encoding="UTF-8"?>
<sequence name="apigeeUserInfoCallSeq"
  onError="apigeeUserInfoCallErrorSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
  <property
    expression="get-property('registry','conf:/repository/wso2telco/configurations/PaymentAPI/apigeeAccessToken')"
    name="apigeeAccessToken" scope="default" type="STRING"/>
  <property
    expression="get-property('registry','conf:/repository/wso2telco/configurations/PaymentAPI/apigeeRefreshToken')"
    name="apigeeRefreshToken" scope="default" type="STRING"/>
  <log level="custom">
    <property expression="boolean(get-property('apigeeAccessToken'))" name="apigeeUserInfoCallSeq"/>
  </log>
  <filter regex="true" source="boolean(get-property('apigeeAccessToken'))">
    <then>
      <log level="custom">
        <property name="apigeeUserInfoCallSeq" value="HELLO WORLD!"/>
      </log>
      <header
        expression="fn:concat('Bearer ',get-property('apigeeAccessToken'))"
        name="Authorization" scope="transport"/>
      <property name="Content-Type" scope="transport" type="STRING" value=""/>
      <call/>
      <log level="custom">
        <property expression="get-property('axis2', 'HTTP_SC')" name="apigeeUserInfoCallSeq.HTTP_SC"/>
      </log>
      <switch source="get-property('axis2', 'HTTP_SC')">
        <case regex="200">
          <property
            expression="json-eval($.getSubscriberTypeResponse.userType)"
            name="userpackagetype" scope="default" type="STRING"/>
          <sequence key="pkgTypeSetSeq"/>
        </case>
        <case regex="401|403">
          <sequence key="apigeeRefreshCallSeq"/>
          <sequence key="apigeeUserInfoCallSeq"/>
        </case>
        <default>
          <sequence key="apigeeUserInfoCallErrorSeq"/>
        </default>
      </switch>
    </then>
    <else>
      <sequence key="apigeeAuthCallSeq"/>
      <log level="custom">
        <property expression="json-eval($.access_token)" name="################# AACS.LOG2"/>
        <property expression="json-eval($.refresh_token)" name="################# AACS.LOG2"/>
      </log>
      <sequence key="apigeeUserInfoCallSeq"/>
    </else>
  </filter>
  <!-- pseudo code for logic to be implemented

    write separate sequence to get refresh and access tokens. (apigeeAuthCallSeq)
    write separate sequences for any repeating tasks

    if (accessToken.exists){
        callUserInfo();

        if(accessTokenExpired){
        update access token using refresh token

             set access token to registry;
        set refresh token to registry;

            if(refreshTokenExpired){
            update refresh token and auth token;

             set refresh token and auth token to registry;


            callSelf();
            }
        }
    }
    else{
        getAccessToken();
        getrefreshToken();

        set access token to registry;
        set refresh token to registry;

        callSelf();
    }
    -->
</sequence>
